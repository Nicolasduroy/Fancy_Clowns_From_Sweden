local
   % See project statement for API details.
   [Project] = {Link ['Project2018.ozf']}
   Time = {Link ['x-oz://boot/Time']}.1.getReferenceTime

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   % Translate a note to the extended notation.
   fun {NoteToExtended Note}
      case Note
      of Name#Octave then
         note(name:Name octave:Octave sharp:true duration:1.0 instrument:none)
      [] silence then
         silence(duration:1.0)
      [] Atom then
         case {AtomToString Atom}
         of [_] then
            note(name:Atom octave:4 sharp:false duration:1.0 instrument:none)
         [] [N O] then
            note(name:{StringToAtom [N]}
                 octave:{StringToInt [O]}
                 sharp:false
                 duration:1.0
                 instrument: none)
         end
      end
   end

   %Translate a chord to the extended notation.
   fun{ChordToExtended Chord}
      case Chord of H|T then
	 {NoteToExtended H}|{ChordToExtended T}
      else
	 nil
      end
   end
   
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   %Stretch the duration of all notes and silences in Chord by Factor
   fun{StretchChord Factor Chord}
      case Chord of H|T then
	 case H of silence(duration:D) then
	    silence(duration:D*Factor)|{StretchChord Factor T}
	 [] note(name:N octave:O sharp:S duration:D instrument:I) then
	    note(name:N octave:O sharp:S duration:D*Factor instrument:I)|{StretchChord Factor T}
	 end
      else
	 nil
      end
   end

   %Stretch the duration of all notes, silences and chords in Part by Factor
   fun{Stretch Factor Part}
      case Part of Elem|T then	 
	 case Elem of silence(duration:D) then
	    silence(duration:D*Factor)|{Stretch Factor T}
	 [] note(name:N octave:O sharp:S duration:D instrument:I) then
	    note(name:N octave:O sharp:S duration:D*Factor instrument:I)|{Stretch Factor T}   
	 [] H|Tail then
	    {StretchChord Factor Elem}|{Stretch Factor T}
	 else
	    {Stretch Factor T}
	 end
      else
	 nil
      end
   end
      
   %Fix the duration of Partition to FixedDuration
   fun {FixDuration FixedDuration Partition}
      D
      %returns the duration in seconds of Partition.
      fun {Duration Partition Acc}	 
	 case Partition of Elem|T then
	    case Elem of silence(duration:D) then
	       {Duration T Acc+D}
	    [] note(name:N octave:O sharp:S duration:D instrument:I) then
	       {Duration T Acc+D}
	    [] H|Tail then
	       case H of silence(duration:D) then
	          {Duration T Acc+D}
	       [] note(name:N octave:O sharp:S duration:D instrument:I) then
	          {Duration T Acc+D}
	       end
	    else
	       {Duration T Acc}
	    end
	 else
	    Acc
	 end
      end
   in
      D = {Duration Partition 0.0}
      if D \= FixedDuration then
	 {Stretch FixedDuration/D Partition}
      else
	 Partition
      end
   end
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   %Returns a list with a Amount of times Sound
   fun  {Drone Sound Amount}
      if Amount == 0 then nil
      else
	 Sound|{Drone Sound Amount-1}
      end
   end

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  fun {Transpose Semitone Partition}
     local Notes SharpNotes NumNotes CurrNum in
        case Partition of Elem|T then
	   Notes = notes(c:0 d:2 e:4 f:5 g:7 a:9 b:11)
	   SharpNotes = sharpnotes(c:1 d:3 f:6 g:8 a:10)
	   NumNotes = numnotes(0:c#false 1:c#true 2:d#false 3:d#true 4:e#false 5:f#false 6:f#true 7:g#false 8:g#true 9:a#false 10:a#true 11:b#false)
	   case Elem of note(name:Name octave:O sharp:S duration:D instrument:I) then
	      if S then
	         CurrNum = O*12 + SharpNotes.Name
	      else
	         CurrNum = O*12 + Notes.Name
	      end
	      case NumNotes.(CurrNum + Semitone mod 12) of N#B then
	         note(name:N octave:(CurrNum + Semitone div 12) sharp:B duration:D instrument:I)|{Transpose Semitone T}
	      else
	        {Transpose Semitone T}
	      end
	   [] H|Tail then
	      {Transpose Semitone Elem}|{Transpose Semitone T}
	   else
	      {Transpose Semitone T}
	   end
        else
	   nil
        end
     end
  end
   
   
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   
   fun {PartitionToTimedList Partition}
      case Partition of Elem|T then
	 case Elem of H|Tail then
	    case H of Atom then
	       {ChordToExtended Elem}|{PartitionToTimedList T}
	    [] Name#Octave then
	       {ChordToExtended Elem}|{PartitionToTimedList T}
	    else
	       Elem|{PartitionToTimedList T}
	    end
	 [] Name#Octave then
	    {NoteToExtended Elem}|{PartitionToTimedList T}
	 [] silence(duration:D) then
	    Elem|{PartitionToTimedList T}
	 [] note(name:N octave:O sharp:S duration:D instrument:I) then
	    Elem|{PartitionToTimedList T}
	 [] duration(seconds:Sec Part) then
	    {Append {FixDuration Sec {PartitionToTimedList Part}} {PartitionToTimedList T}}
	 [] stretch(factor:Factor Part) then
	    {Append {Stretch Factor {PartitionToTimedList Part}} {PartitionToTimedList T}}
	 [] drone(note:Sound amount:Amount)then
	    case Sound of H|Tail then
	       {Append {Drone {ChordToExtended Sound} Amount} {PartitionToTimedList T}}
	    else
	       {Append {Drone {NoteToExtended Sound}Amount} {PartitionToTimedList T}}
	    end
	 [] transpose(semitones:Semitones Part) then
	    {Append {Transpose Semitones {PartitionToTimedList Part}} {PartitionToTimedList T}} 
	 [] Atom then
	     {NoteToExtended Elem}|{PartitionToTimedList T}
	 else 
	    Elem|{PartitionToTimedList T}
	 end
	 else
	 nil
      end
   end
  

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   Pi = 3.14159265359
   fun{ChordToSamples F A Acc1 Acc2}
      if Acc1 >= A then
	 nil
      else
	 case F of H|T then
	    {ChordToSamples T A Acc1 Acc2+{Sin (2.0*Pi*H*Acc1)/44100.0}/2.0}
	 else
	    Acc2|{ChordToSamples F A Acc1+1.0 0.0}
	 end
      end
   end
   
   fun{NoteToSamples F A I}
      if I >= A then
	 nil
      else
	 {Sin (2.0*Pi*F*I)/44100.0}/2.0|{NoteToSamples F A I+1.0}
      end
   end

   fun {Frequency Elem}
      local Notes SharpNotes NumNotes CurrNum in
	 Notes = notes(c:~9 d:~7 e:~5 f:~4 g:~2 a:0 b:2)
	 SharpNotes = sharpnotes(c:~8 d:~6 f:~3 g:~1 a:1)
	 NumNotes = numnotes(~9:c#false ~8:c#true ~7:d#false ~6:d#true ~5:e#false ~4:f#false ~3:f#true ~2:g#false ~1:g#true 0:a#false 1:a#true 2:b#false)
	 case Elem of note(name:Name octave:O sharp:S duration:D instrument:I) then
	    if S then
	       CurrNum = (O-4)*12 + SharpNotes.Name
	    else
	       CurrNum = (O-4)*12 + Notes.Name
	    end
	    {Pow 2.0 {IntToFloat CurrNum}/12.0}*440.0
	 []H|Tail then 
	    {Frequency H}|{Frequency Tail}
	 else
	    nil
	 end
      end
   end	    
	       
   fun {PartitionToSamples Partition}
      case Partition of  Elem|T then
	 case Elem of silence(duration:D) then
	    {Append {NoteToSamples 0 44100.0*D 1.0} {PartitionToSamples T}}
	 [] note(name:N octave:O sharp:S duration:D instrument:I) then
	    {Append {NoteToSamples {Frequency Elem} 44100.0*D 0.0} {PartitionToSamples T}}
	 [] H|Tail then
	    {Append {ChordToSamples {Frequency Elem} 44100.0*H.duration 0.0 0.0} {PartitionToSamples T}}
	 end
      else
	 nil
      end
   end
   
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   
   fun {Mix P2T Music}
      case Music of Elem|T then
	 case Elem of partition(Partition) then
	    {Append {PartitionToSamples {P2T Partition}} {Mix P2T T}
	 else
	    {Mix PartitionToTimedList T}
	 end
      end
   end
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   Music = {Project.load 'joy.dj.oz'}
   Start

   % Uncomment next line to insert your tests.
   % \insert 'tests.oz'
   % !!! Remove this before submitting.
in
   Start = {Time}

   % Uncomment next line to run your tests.
   % {Test Mix PartitionToTimedList}

   % Add variables to this list to avoid "local variable used only once"
   % warnings.
   {ForAll [NoteToExtended Music] Wait}
   
   % Calls your code, prints the result and outputs the result to `out.wav`.
   % You don't need to modify this.
   {Browse {Project.run Mix PartitionToTimedList Music 'out.wav'}}
   
   % Shows the total time to run your code.
   {Browse {IntToFloat {Time}-Start} / 1000.0}
end
