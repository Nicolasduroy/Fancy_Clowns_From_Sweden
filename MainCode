local
   % See project statement for API details.
   [Project] = {Link ['Project2018.ozf']}
   Time = {Link ['x-oz://boot/Time']}.1.getReferenceTime
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % Translate a note to the extended notation.
   fun {NoteToExtended Note}
      case Note
      of Name#Octave then
         note(name:Name octave:Octave sharp:true duration:1.0 instrument:none)
      [] silence then
	 silence(duration:1.0)
      [] note(name:N octave:O sharp:S duration:D instrument:I) then
	 Note
      [] Atom then
         case {AtomToString Atom}
         of [_] then
            note(name:Atom octave:4 sharp:false duration:1.0 instrument:none)
         [] [N O] then
            note(name:{StringToAtom [N]}
                 octave:{StringToInt [O]}
                 sharp:false
                 duration:1.0
                 instrument: none)
         end
      end
   end

   %Translate a chord to the extended notation.
   fun{ChordToExtended Chord}
      case Chord of H|T then
	 {NoteToExtended H}|{ChordToExtended T}
      else
	 nil
      end
   end
   
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   %Stretch the duration of all notes and silences in Chord by Factor
   fun{StretchChord Factor Chord}
      case Chord of H|T then
	 case H of silence(duration:D) then
	    silence(duration:D*Factor)|{StretchChord Factor T}
	 [] note(name:N octave:O sharp:S duration:D instrument:I) then
	    note(name:N octave:O sharp:S duration:D*Factor instrument:I)|{StretchChord Factor T}
	 end
      else
	 nil
      end
   end

   %Stretch the duration of all notes, silences and chords in Part by Factor
   fun{Stretch Factor Part}
      case Part of Elem|T then	 
	 case Elem of silence(duration:D) then
	    silence(duration:D*Factor)|{Stretch Factor T}
	 [] note(name:N octave:O sharp:S duration:D instrument:I) then
	    note(name:N octave:O sharp:S duration:D*Factor instrument:I)|{Stretch Factor T}   
	 [] H|Tail then
	    {StretchChord Factor Elem}|{Stretch Factor T}
	 else
	    {Stretch Factor T}
	 end
      else
	 nil
      end
   end
      
   %Fix the duration of Partition to FixedDuration
   fun {FixDuration FixedDuration Partition}
      D
      %returns the duration in seconds of Partition.
      fun {Duration Partition Acc}	 
	 case Partition of Elem|T then
	    case Elem of silence(duration:D) then
	       {Duration T Acc+D}
	    [] note(name:N octave:O sharp:S duration:D instrument:I) then
	       {Duration T Acc+D}
	    [] H|Tail then
	       case H of silence(duration:D) then
	          {Duration T Acc+D}
	       [] note(name:N octave:O sharp:S duration:D instrument:I) then
	          {Duration T Acc+D}
	       end
	    else
	       {Duration T Acc}
	    end
	 else
	    Acc
	 end
      end
   in
      D = {Duration Partition 0.0}
      if D \= FixedDuration then
	 {Stretch FixedDuration/D Partition}
      else
	 Partition
      end 
   end
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   %Returns a list with a Amount of times Sound
   fun  {Drone Sound Amount}
      if Amount == 0 then nil
      else
	 Sound|{Drone Sound Amount-1}
      end
   end

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  fun {Transpose Semitone Partition}
     local Notes SharpNotes NumNotes CurrNum in
        case Partition of Elem|T then
	   Notes = notes(c:0 d:2 e:4 f:5 g:7 a:9 b:11)
	   SharpNotes = sharpnotes(c:1 d:3 f:6 g:8 a:10)
	   NumNotes = numnotes(0:c#false 1:c#true 2:d#false 3:d#true 4:e#false 5:f#false 6:f#true 7:g#false 8:g#true 9:a#false 10:a#true 11:b#false)
	   case Elem of note(name:Name octave:O sharp:S duration:D instrument:I) then
	      if S then
	         CurrNum = O*12 + SharpNotes.Name
	      else
	         CurrNum = O*12 + Notes.Name
	      end
	      case NumNotes.((CurrNum + Semitone) mod 12) of N#B then
	         note(name:N octave:((CurrNum + Semitone) div 12) sharp:B duration:D instrument:I)|{Transpose Semitone T}
	      else
	        {Transpose Semitone T}
	      end
	   [] H|Tail then
	      {Transpose Semitone Elem}|{Transpose Semitone T}
	   else
	      {Transpose Semitone T}
	   end
        else
	   nil
        end
     end
  end

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  fun{DefInstrument Instrument Partition}
     case Partition of Elem|T then
	case Elem of note(name:N octave:O sharp:S duration:D instrument:none) then
	   note(name:N octave:O sharp:S duration:D instrument:Instrument)|{DefInstrument Instrument T}
	[] H|Tail then
	   {DefInstrument Instrument H}|{DefInstrument Instrument T}
	else
	   Elem|{DefInstrument Instrument T}
	end
     else
	nil
     end
  end
	   
   
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   
  fun {PartitionToTimedList Partition}
     case Partition of Elem|T then
	case Elem of H|Tail then
	   {ChordToExtended Elem}|{PartitionToTimedList T}
	[] silence(duration:D) then
	   Elem|{PartitionToTimedList T}
	[] note(name:N octave:O sharp:S duration:D instrument:I) then
	   Elem|{PartitionToTimedList T}
	[] nil then
	   {PartitionToTimedList T}
	[] duration(seconds:Sec Part) then
	   {Append {FixDuration Sec {PartitionToTimedList Part}} {PartitionToTimedList T}}
	[] stretch(factor:Factor Part) then
	   {Append {Stretch Factor {PartitionToTimedList Part}} {PartitionToTimedList T}}
	[] drone(note:Sound amount:Amount)then
	   case Sound of H|Tail then
	      {Append {Drone {ChordToExtended Sound} Amount} {PartitionToTimedList T}}
	   else
	      {Append {Drone {NoteToExtended Sound}Amount} {PartitionToTimedList T}}
	   end
	[] transpose(semitones:Semitones Part) then
	   {Append {Transpose Semitones {PartitionToTimedList Part}} {PartitionToTimedList T}}
	[] instrument(name:Instrument Part) then
	   {Append {DefInstrument Instrument {PartitionToTimedList Part}} {PartitionToTimedList T}}
	[] Atom then
	    {NoteToExtended Elem}|{PartitionToTimedList T}
	else 
	   Elem|{PartitionToTimedList T}
	end
     else
	nil
     end
  end
  

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   Pi = 3.14159265359
   fun{ChordToSamples Finit Facc A Acc1 Acc2}
      local N in
	 N = {IntToFloat {List.length Finit}}
	 if Acc1 >= A then
	    nil
	 else
	    case Facc of H|T then
	       {ChordToSamples Finit T A Acc1 (Acc2+{Sin (2.0*Pi*H*Acc1)/44100.0}/(2.0*N))}
	    else	     
	       Acc2|{ChordToSamples Finit Finit A Acc1+1.0 0.0}
	    end
	 end
      end
   end
   
   fun {SilenceToSamples Duration Acc}
      if Acc >= Duration then
	 nil
      else
	 0|{SilenceToSamples Duration Acc+1.0}
      end
   end
   
   fun{NoteToSamples F A I}
      if I >= A then
	 nil
      else
	 {Sin (2.0*Pi*F*I)/44100.0}/2.0|{NoteToSamples F A I+1.0}
      end
   end

   fun {Frequency Elem}
      local Notes SharpNotes NumNotes CurrNum in
	 Notes = notes(c:~9 d:~7 e:~5 f:~4 g:~2 a:0 b:2)
	 SharpNotes = sharpnotes(c:~8 d:~6 f:~3 g:~1 a:1)
	 NumNotes = numnotes(~9:c#false ~8:c#true ~7:d#false ~6:d#true ~5:e#false ~4:f#false ~3:f#true ~2:g#false ~1:g#true 0:a#false 1:a#true 2:b#false)
	 case Elem of note(name:Name octave:O sharp:S duration:D instrument:I) then
	    if S then
	       CurrNum = (O-4)*12 + SharpNotes.Name
	    else
	       CurrNum = (O-4)*12 + Notes.Name
	    end
	    {Pow 2.0 {IntToFloat CurrNum}/12.0}*440.0
	 []H|Tail then 
	    {Frequency H}|{Frequency Tail}
	 else
	    nil
	 end
      end
   end	    
	       
   fun {PartitionToSamples Partition}
      case Partition of  Elem|T then
	 case Elem of silence(duration:D) then
	    {Append {SilenceToSamples 44100.0*D 0.0} {PartitionToSamples T}} %Creer une fonction appart pour silence? Calcule non necessaire
	 [] note(name:N octave:O sharp:S duration:D instrument:I) then
	    {Append {NoteToSamples {Frequency Elem} 44100.0*D 0.0} {PartitionToSamples T}}
	 [] H|Tail then
	    {Append {ChordToSamples {Frequency Elem} {Frequency Elem} 44100.0*H.duration 0.0 0.0} {PartitionToSamples T}}
	 end
      else
	 nil
      end
   end
   
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   fun{Repeat Amount Music}
      if Amount == 1 then
	 Music
      else
	 {Append Music {Repeat Amount-1 Music}} %Je pense qu'il faut mettre le premier Music en [] ==> non Music est deja une liste
      end
   end

   fun{Loop Duration Music}
      local Time Number in
	 Time = {IntToFloat {List.length Music}}/44100.0
	 Number = Duration/Time
	 if (Number =< 1.0) then
	    {Cut 0.0 Duration Music}
	 else
	    if (Number-{IntToFloat {FloatToInt Number}} =< 0.0) then
	       {Append {Repeat {FloatToInt Number-1.0} Music} {Cut 0.0 (Duration-({IntToFloat {FloatToInt Number}-1})*Time) Music}}
	    else
	       {Append {Repeat {FloatToInt Number} Music} {Cut 0.0 (Duration-({IntToFloat {FloatToInt Number}}*Time)) Music}}
	    end
	 end
      end
   end

   fun{Cut Start Stop Music}
      fun {CutAux Start Stop Acc Music}
	 if Acc =< (Stop*44100.0)-1.0 then
	    case Music of H|T then
	       if Acc < Start*44100.0 then
		  {CutAux Start Stop Acc+1.0 T}
	       else
		  H|{CutAux Start Stop Acc+1.0 T}
	       end
	    else
	       0.0|{CutAux Start Stop Acc+1.0 nil}
	    end
	 else
	    nil
	 end
      end
   in
      {CutAux Start Stop 0.0 Music}
   end
   
   fun {ParseMusic List Acc1 Acc2} %Parses Intensities and Music. Returns [Intensities Music]
      case List of H|T then
         case H of Inten#Mus then
	    {ParseMusic T Inten|Acc1 Mus|Acc2}
         else
	    {ParseMusic T Acc1 Acc2}
         end
      else
         r(Acc1 Acc2)
      end
   end
   
   fun {Merger IntenList MusList Acc} %Adds multiplies the List of samples MusList with IntenList then adds them into Acc
      case MusList of H|T then
         case IntenList of IntenH|IntenT then
	    {Merger T IntenT Acc+H*IntenH}
         else
	    {Merger T IntenList Acc} %Normally, if the formatting is correct, this will never be used
         end
      else
         Acc
      end
   end
   
   
   fun {Merge IntenList MusList Counter}%Counter is used here to keep track of how many lists there are that have not ended
      fun {CollectMus MusList Acc1 Acc2 Count}%Splits the first elements from the lists and puts them into Acc1, Acc2 is a list of the tails (nils are replaced with 0.0)
         case MusList of H|T then
	    case H of Head|Tail then
	       if Tail == nil then
	          {CollectMus T Head|Acc1 0.0|Acc2 Count-1}
	       else
	          {CollectMus T Head|Acc1 Tail|Acc2 Count}
	       end
	    else
	       {CollectMus T 0.0|Acc1 0.0|Acc2 Count}
	    end
         else
	    r({List.reverse Acc1} {List.reverse Acc2} Count)
         end
      end
   in
      if Counter == 0 then
         nil
      else
         local Temp in
	    Temp = {CollectMus MusList nil nil Counter}
	    case MusList of H|T then
	       {Merger IntenList Temp.1 0.0}|{Merge IntenList Temp.2 Temp.3}
	    else
	       nil
	    end
         end
      end
   end
   
   fun {Echo Duration Factor Music}
      fun {EchoCreator Dur Music}
         if Dur>0.0 then
	    {EchoCreator Dur-1.0 0.0|Music}
         else
	    Music
         end
      end
   in
      {Merge [1.0-Factor Factor] [Music {EchoCreator Duration*44100.0 Music}] 2}
   end

   fun {Fade DurationIn DurationOut Mus}
      Length = {Int.toFloat {List.length Mus}}
      IntIn = DurationIn*44100.0
      IntOut = DurationOut*44100.0
      StepIn = 1.0/IntIn
      StepOut = 1.0/IntOut
      fun {Linearizer Mus Step Count}
         if Count < Length-IntOut-1.0 then
	    case Mus of H|T then
	       if Count < IntIn then
	          H*Step|{Linearizer T Step+StepIn Count+1.0}
	       else
	          H|{Linearizer T 1.0 Count+1.0}
	       end
	    else
	       nil %If specification is respected, this will never be executed
	    end
         else
	    case Mus of H|T then
	       if Count == Length-1.0 then
		  0.0|{Linearizer T Step-StepOut Count+1.0} %Guarantee that the last frequency will be 0
	       else
		  Step*H|{Linearizer T Step-StepOut Count+1.0}
	       end
	    else
	       nil
	    end
         end
      end
   in
       {Linearizer Mus 0.0 0.0} 
   end
   

   
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   fun {Mix P2T Music}
      case Music of Elem|T then
	 case Elem of partition(Partition) then
	    {Append {PartitionToSamples {P2T Partition}} {Mix P2T T}}
	 [] merge(MusWInten) then
	    local Temp MixBis in
	       fun{MixBis Music} {Mix P2T Music} end
	       Temp = {ParseMusic MusWInten nil nil}
	       {Append {Merge Temp.1 {Map Temp.2 MixBis} {List.length MusWInten}} {Mix P2T T}}%Mix couldn't Map enables it
	    end
	 [] reverse(Mus) then
	    {Append {Reverse {Mix P2T Mus}} {Mix P2T T}}
	 [] repeat(amount:Amount Mus) then
	    {Append {Repeat Amount {Mix P2T Mus}} {Mix P2T T}}
	 [] loop(duration:Duration Mus) then
	    {Append {Loop Duration {Mix P2T Mus}} {Mix P2T T}}
	 [] cut(start:Start finish:Stop Mus) then
	    {Append {Cut Start Stop {Mix P2T Mus}} {Mix P2T T}}
	 [] echo(delay:Duration decay:Factor Mus) then
	    {Append {Echo Duration Factor {Mix P2T Mus}} {Mix P2T T}}
	 [] fade(start:DurIn out:DurOut Mus) then
	    {Append {Fade DurIn DurOut {Mix P2T Mus}} {Mix P2T T}}
	 [] wave(FileName) then
	    {Append {Project.readFile} {Mix P2T T}}
	 [] samples(Samples) then
	    {Append Samples {Mix P2T T}}
	 [] nil then
	    {Mix P2T T}
	 [] Samples then
	    Samples|{Mix P2T T}
	 else
	    {Mix P2T T}
	 end
      else
	 nil
      end
   end

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   Music = {Project.load 'TestsCode.dj.oz'}
   Start

   % Uncomment next line to insert your tests.
   % \insert 'tests.oz'
   % !!! Remove this before submitting.
in
   Start = {Time}

   % Uncomment next line to run your tests.
   % {Test Mix PartitionToTimedList}

   % Add variables to this list to avoid "local variable used only once"
   % warnings.
   {ForAll [NoteToExtended Music] Wait}
   
   % Calls your code, prints the result and outputs the result to `out.wav`.
   % You don't need to modify this.
   {Browse {Project.run Mix PartitionToTimedList Music 'out.wav'}}
   
   % Shows the total time to run your code.
   {Browse {IntToFloat {Time}-Start} / 1000.0}
end
